#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using Epinova.ElasticSearch.Core.EPiServer.Extensions;
    using Epinova.ElasticSearch.Core.EPiServer.Models.ViewModels;
    using EPiServer;
    using EPiServer.Core;
    using EPiServer.Editor;
    using EPiServer.Framework.Localization;
    using EPiServer.Security;
    using EPiServer.SpecializedProperties;
    using EPiServer.Web;
    using EPiServer.Web.Mvc.Html;
    using EPiServer.Web.Routing;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/ElasticSearchAdmin/Tracking/Index.cshtml")]
    public partial class _Views_ElasticSearchAdmin_Tracking_Index_cshtml : System.Web.Mvc.WebViewPage<TrackingViewModel>
    {
        public _Views_ElasticSearchAdmin_Tracking_Index_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n");

  
    Layout = "~/Views/ElasticSearchAdmin/_ElasticSearch.cshtml";

WriteLiteral("\r\n\r\n");

 if (Model == null)
{
    return;
}

WriteLiteral("\r\n");

DefineSection("Styles", () => {

WriteLiteral("\r\n    <style>\r\n        #tabContainer .field-actions {\r\n            width: 120px;\r" +
"\n            text-align: center;\r\n        }\r\n\r\n        .dgrid {\r\n            max" +
"-width: 600px;\r\n        }\r\n    </style>\r\n");

});

WriteLiteral("\r\n");

  
    string localizationPath = "/epinovaelasticsearch/tracking/";

WriteLiteral("\r\n\r\n<div");

WriteLiteral(" id=\"tabContainer\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" data-dojo-type=\"dijit/layout/TabContainer\"");

WriteLiteral(" doLayout=\"false\"");

WriteLiteral(">\r\n");

        
         foreach (TrackingByLanguage lang in Model.SearchesByLanguage)
        {

WriteLiteral("            <div");

WriteLiteral(" data-dojo-type=\"dijit/layout/ContentPane\"");

WriteAttribute("title", Tuple.Create(" title=\"", 903), Tuple.Create("\"", 929)
, Tuple.Create(Tuple.Create("", 911), Tuple.Create<System.Object, System.Int32>(lang.LanguageName
, 911), false)
);

WriteLiteral(" data-dojo-props=\"");

                                                                                                   Write(lang.LanguageId == Model.CurrentLanguage ? "selected:true" : null);

WriteLiteral("\"");

WriteLiteral(">\r\n                <div");

WriteLiteral(" class=\"epi-padding-small\"");

WriteLiteral(">\r\n");

                    
                     if (ViewBag.Indices != null)
                    {
                        using (Html.BeginForm("Index", "ElasticTracking"))
                        {

WriteLiteral("                            <input");

WriteLiteral(" type=\"hidden\"");

WriteLiteral(" name=\"LanguageId\"");

WriteAttribute("value", Tuple.Create(" value=\"", 1312), Tuple.Create("\"", 1336)
, Tuple.Create(Tuple.Create("", 1320), Tuple.Create<System.Object, System.Int32>(lang.LanguageId
, 1320), false)
);

WriteLiteral(" />\r\n");

WriteLiteral("                            <h2>");

                           Write(Html.TranslateWithPathRaw("index", localizationPath));

WriteLiteral("</h2>\r\n");

WriteLiteral("                            <p>\r\n                                <label>\r\n       " +
"                             <select");

WriteLiteral(" data-dojo-type=\"dijit/form/Select\"");

WriteLiteral(" name=\"index\"");

WriteLiteral(">\r\n");

                                        
                                         foreach (string index in ViewBag.Indices)
                                        {

WriteLiteral("                                            <option");

WriteAttribute("value", Tuple.Create(" value=\"", 1780), Tuple.Create("\"", 1794)
, Tuple.Create(Tuple.Create("", 1788), Tuple.Create<System.Object, System.Int32>(index
, 1788), false)
);

WriteAttribute("selected", Tuple.Create(" selected=\"", 1795), Tuple.Create("\"", 1859)
, Tuple.Create(Tuple.Create("", 1806), Tuple.Create<System.Object, System.Int32>(ViewBag.SelectedIndex == index ? "selected" : null
, 1806), false)
);

WriteLiteral(">");

                                                                                                                               Write(index);

WriteLiteral("</option>\r\n");

                                        }

WriteLiteral("                                    </select>\r\n                                </" +
"label>\r\n                                <button");

WriteLiteral(" data-dojo-type=\"dijit/form/Button\"");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" class=\"epi-primary\"");

WriteLiteral(">");

                                                                                                        Write(Html.TranslateWithPathRaw("show", localizationPath));

WriteLiteral("</button>\r\n                            </p>\r\n");

                        }
                    }

WriteLiteral("                    \r\n                    <h2>");

                   Write(Html.TranslateWithPath("searches", localizationPath));

WriteLiteral("</h2>\r\n                    <div");

WriteAttribute("id", Tuple.Create(" id=\"", 2396), Tuple.Create("\"", 2429)
, Tuple.Create(Tuple.Create("", 2401), Tuple.Create<System.Object, System.Int32>(lang.LanguageId
, 2401), false)
, Tuple.Create(Tuple.Create("", 2419), Tuple.Create("-wordsGrid", 2419), true)
);

WriteLiteral("></div>\r\n                    <h2>");

                   Write(Html.TranslateWithPath("searchesnohits", localizationPath));

WriteLiteral("</h2>\r\n                    <div");

WriteAttribute("id", Tuple.Create(" id=\"", 2553), Tuple.Create("\"", 2587)
, Tuple.Create(Tuple.Create("", 2558), Tuple.Create<System.Object, System.Int32>(lang.LanguageId
, 2558), false)
, Tuple.Create(Tuple.Create("", 2576), Tuple.Create("-nohitsGrid", 2576), true)
);

WriteLiteral("></div>\r\n\r\n");

                    
                     using (Html.BeginForm("Clear", "ElasticTracking"))
                    {

WriteLiteral("                        <input");

WriteLiteral(" type=\"hidden\"");

WriteLiteral(" name=\"LanguageID\"");

WriteAttribute("value", Tuple.Create(" value=\"", 2757), Tuple.Create("\"", 2781)
, Tuple.Create(Tuple.Create("", 2765), Tuple.Create<System.Object, System.Int32>(lang.LanguageId
, 2765), false)
);

WriteLiteral(" />\r\n");

WriteLiteral("                        <input");

WriteLiteral(" type=\"hidden\"");

WriteLiteral(" name=\"index\"");

WriteAttribute("value", Tuple.Create(" value=\"", 2844), Tuple.Create("\"", 2874)
, Tuple.Create(Tuple.Create("", 2852), Tuple.Create<System.Object, System.Int32>(ViewBag.SelectedIndex
, 2852), false)
);

WriteLiteral(" />\r\n");

WriteLiteral("                        <p>&nbsp;</p>\r\n");

WriteLiteral("                        <p>\r\n                            <button");

WriteLiteral(" data-dojo-type=\"dijit/form/Button\"");

WriteAttribute("onClick", Tuple.Create("\r\n                                    onClick=\"", 3018), Tuple.Create("\"", 3141)
, Tuple.Create(Tuple.Create("", 3065), Tuple.Create("return", 3065), true)
, Tuple.Create(Tuple.Create(" ", 3071), Tuple.Create("confirm(\'", 3072), true)
, Tuple.Create(Tuple.Create("", 3081), Tuple.Create<System.Object, System.Int32>(Html.TranslateWithPath("clearconfirm", localizationPath)
, 3081), false)
, Tuple.Create(Tuple.Create("", 3138), Tuple.Create("\');", 3138), true)
);

WriteLiteral("\r\n                                    type=\"submit\"");

WriteAttribute("class", Tuple.Create("\r\n                                    class=\"", 3193), Tuple.Create("\"", 3300)
, Tuple.Create(Tuple.Create("", 3238), Tuple.Create("epi-primary", 3238), true)
, Tuple.Create(Tuple.Create(" ", 3249), Tuple.Create<System.Object, System.Int32>(lang.Searches.Count == 0 ? "is-disabled" : null
, 3250), false)
);

WriteLiteral(">\r\n");

WriteLiteral("                                ");

                           Write(Html.TranslateWithPath("clear", localizationPath));

WriteLiteral("\r\n                            </button>\r\n                        </p>\r\n");

                    }

WriteLiteral("                </div>\r\n            </div>\r\n");

        }

WriteLiteral(@"    </div>
</div>


<script>
    function htmlDecode(input) {
        var doc = new DOMParser().parseFromString(input, ""text/html"");
        return doc.documentElement.textContent;
    }

    require(
        [""dojo/_base/declare"", ""dgrid/Grid"", ""dijit/form/Button"", ""dojo/domReady!""],
        function (declare, Grid) {
");

            
             foreach (TrackingByLanguage lang in Model.SearchesByLanguage)
            {

WriteLiteral("                ");

WriteLiteral("\r\n                new Grid({\r\n                        \"class\": \"epi-grid-height--" +
"300 epi-grid--with-border\",\r\n                        columns: {\r\n               " +
"             word: \"");

                              Write(Html.Raw(Html.TranslateWithPath("searchword", localizationPath)));

WriteLiteral("\",\r\n                            count: \"");

                               Write(Html.Raw(Html.TranslateWithPath("count", localizationPath)));

WriteLiteral("\"\r\n                        }\r\n                    }, \"");

                    Write(lang.LanguageId);

WriteLiteral("-wordsGrid\")\r\n                    .renderArray([\r\n");

                        
                         foreach (KeyValuePair<string, long> search in lang.Searches)
                        {

WriteLiteral("                            ");

WriteLiteral("{ word: htmlDecode(\"");

                                                 Write(Html.Raw(search.Key));

WriteLiteral("\"), count: \"");

                                                                                  Write(search.Value);

WriteLiteral("\" }");

WriteLiteral("\r\n");

                            
                        Write(search.Key != lang.Searches.Last().Key ? "," : null);

                                                                                  
                        }

WriteLiteral("                    ]);\r\n                ");

WriteLiteral("\r\n");

            }

WriteLiteral("\r\n");

            
             foreach (TrackingByLanguage lang in Model.SearchesWithoutHitsByLanguage)
            {

WriteLiteral("                ");

WriteLiteral("\r\n                new Grid({\r\n                        \"class\": \"epi-grid-height--" +
"300 epi-grid--with-border\",\r\n                        columns: {\r\n               " +
"             word: \"");

                              Write(Html.Raw(Html.TranslateWithPath("searchword", localizationPath)));

WriteLiteral("\",\r\n                            count: \"");

                               Write(Html.Raw(Html.TranslateWithPath("count", localizationPath)));

WriteLiteral("\"\r\n                        }\r\n                    }, \"");

                    Write(lang.LanguageId);

WriteLiteral("-nohitsGrid\")\r\n                    .renderArray([\r\n");

                        
                         foreach (KeyValuePair<string, long> search in lang.Searches)
                        {

WriteLiteral("                            ");

WriteLiteral("{ word: htmlDecode(\"");

                                                 Write(Html.Raw(search.Key));

WriteLiteral("\"), count: \"");

                                                                                  Write(search.Value);

WriteLiteral("\" }");

WriteLiteral("\r\n");

                            
                        Write(search.Key != lang.Searches.Last().Key ? "," : null);

                                                                                  
                        }

WriteLiteral("                    ]);\r\n                ");

WriteLiteral("\r\n");

            }

WriteLiteral("        });\r\n</script>");

        }
    }
}
#pragma warning restore 1591
