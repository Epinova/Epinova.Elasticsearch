#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using Epinova.ElasticSearch.Core.EPiServer.Extensions;
    using Epinova.ElasticSearch.Core.EPiServer.Models.ViewModels;
    using Epinova.ElasticSearch.Core.Models;
    using EPiServer;
    using EPiServer.Core;
    using EPiServer.Editor;
    using EPiServer.Security;
    using EPiServer.SpecializedProperties;
    using EPiServer.Web;
    using EPiServer.Web.Mvc.Html;
    using EPiServer.Web.Routing;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/ElasticSearchAdmin/IndexInspector/Index.cshtml")]
    public partial class _Views_ElasticSearchAdmin_IndexInspector_Index_cshtml : System.Web.Mvc.WebViewPage<InspectViewModel>
    {
        public _Views_ElasticSearchAdmin_IndexInspector_Index_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n");

WriteLiteral("\r\n");

  
    Layout = "~/Views/ElasticSearchAdmin/_ElasticSearch.cshtml";

WriteLiteral("\r\n\r\n");

 if (Model == null)
{
    return;
}

WriteLiteral("\r\n");

  
    string localizationPath = "/epinovaelasticsearch/indexinspector/";

WriteLiteral("\r\n\r\n");

DefineSection("Scripts", () => {

WriteLiteral(@"
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var accordions = document.getElementsByClassName(""_jsAccordion"");

            for (var i = 0; i < accordions.length; i++) {
                accordions[i].onclick = function (e) {
                    e.preventDefault();

                    if (this.getAttribute('aria-expanded') === 'false') {
                        this.setAttribute(""aria-expanded"", ""true"");
                    } else {
                        this.setAttribute(""aria-expanded"", ""false"");
                    }

                    var controls = this.getAttribute('aria-controls'),
                        content = document.getElementById(controls);

                    if (content.style.display === ""block"") {
                        content.style.display = ""none"";
                    } else {
                        content.style.display = ""block"";
                    }
                }
            }
        }, false);
    </script>
");

});

WriteLiteral("\r\n<div");

WriteLiteral(" id=\"tabContainer\"");

WriteLiteral(">\r\n    <div");

WriteLiteral(" data-dojo-type=\"dijit/layout/TabContainer\"");

WriteLiteral(" doLayout=\"false\"");

WriteLiteral(">\r\n");

        
         foreach (var lang in Model.Languages)
        {

WriteLiteral("            <div");

WriteLiteral(" data-dojo-type=\"dijit/layout/ContentPane\"");

WriteAttribute("title", Tuple.Create(" title=\"", 1721), Tuple.Create("\"", 1747)
, Tuple.Create(Tuple.Create("", 1729), Tuple.Create<System.Object, System.Int32>(lang.LanguageName
, 1729), false)
);

WriteLiteral(" data-dojo-props=\"");

                                                                                                   Write(lang.LanguageId == Model.CurrentLanguage ? "selected:true" : null);

WriteLiteral("\"");

WriteLiteral(">\r\n                <div");

WriteLiteral(" class=\"epi-padding-small\"");

WriteLiteral(">\r\n");

                    
                     if (lang.Indices.Count > 1)
                    {

WriteLiteral("                        <h2>");

                       Write(Html.TranslateWithPathRaw("indexes", localizationPath));

WriteLiteral("</h2>\r\n");

WriteLiteral("                        <div");

WriteLiteral(" data-dojo-type=\"dijit/form/DropDownButton\"");

WriteLiteral(" class=\"epi-primary\"");

WriteLiteral(">\r\n                            <span>");

                             Write(ViewBag.SelectedIndexName);

WriteLiteral("</span>\r\n                            <div");

WriteLiteral(" data-dojo-type=\"dijit/DropDownMenu\"");

WriteLiteral(">\r\n");

                                
                                 foreach (var index in lang.Indices)
                                {
                                    var indexName = $"{index.Key}-{lang.LanguageId}";
                                    if (indexName != ViewBag.SelectedIndex)
                                    {

WriteLiteral("                                        <div");

WriteLiteral(" data-dojo-type=\"dijit/MenuItem\"");

WriteLiteral("\r\n                                                data-dojo-props=\"onClick:functi" +
"on(){document.location=\'?index=");

                                                                                                         Write(indexName);

WriteLiteral("&languageId=");

                                                                                                                               Write(lang.LanguageId);

WriteLiteral("\';}\"");

WriteLiteral(">\r\n");

WriteLiteral("                                            ");

                                       Write(index.Value);

WriteLiteral("\r\n                                        </div>\r\n");

                                    }
                                }

WriteLiteral("                            </div>\r\n                        </div>\r\n");

                    }

WriteLiteral("\r\n");

                    
                     using (Html.BeginForm("Index", "ElasticIndexInspector", new { index = ViewBag.SelectedIndex, languageId = Model.CurrentLanguage }, FormMethod.Post, null))
                    {

WriteLiteral("                        <div");

WriteLiteral(" class=\"indexInspector\"");

WriteLiteral(">\r\n                            <div");

WriteLiteral(" class=\"mainContent\"");

WriteLiteral(">\r\n                                <h1");

WriteLiteral(" class=\"EP-prefix\"");

WriteLiteral(">");

                                                 Write(Html.TranslateWithPath("heading", localizationPath));

WriteLiteral("</h1>\r\n                                <p>\r\n                                    <" +
"input");

WriteLiteral(" data-dojo-type=\"dijit/form/ValidationTextBox\"");

WriteLiteral(" data-dojo-props=\"placeholder:\'");

                                                                                                                  Write(Html.TranslateWithPathRaw("placeholder", localizationPath));

WriteLiteral("\'\"");

WriteLiteral(" name=\"searchText\"");

WriteAttribute("value", Tuple.Create(" value=\"", 3755), Tuple.Create("\"", 3780)
                                                                                                                              , Tuple.Create(Tuple.Create("", 3763), Tuple.Create<System.Object, System.Int32>(Model.SearchText
, 3763), false)
);

WriteLiteral(" />\r\n                                    <button");

WriteLiteral(" data-dojo-type=\"dijit/form/Button\"");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" class=\"epi-primary\"");

WriteLiteral(">");

                                                                                                            Write(Html.TranslateWithPath("execute", localizationPath));

WriteLiteral("</button>\r\n                                </p>\r\n\r\n");

                                
                                 if (String.IsNullOrWhiteSpace(Model.SearchText) && String.IsNullOrWhiteSpace(Model.SelectedType))
                                {

WriteLiteral("                                    <h2>");

                                   Write(Html.TranslateWithPath("unfiltered", localizationPath));

WriteLiteral("</h2>\r\n");

                                }
                                else if (Model.SearchHits == null || !Model.SearchHits.Any())
                                {

WriteLiteral("                                    <h2>");

                                   Write(Html.TranslateWithPath("nohits", localizationPath));

WriteLiteral("</h2>\r\n");

                                }
                                else
                                {

WriteLiteral("                                    <ol");

WriteLiteral(" class=\"indexes\"");

WriteLiteral(">\r\n");

                                        
                                         for (var index = 0; index < Model.SearchHits.Count; index++)
                                        {
                                            InspectItem item = Model.SearchHits[index];

WriteLiteral("                                            <li");

WriteLiteral(" class=\"accordion\"");

WriteLiteral(">\r\n                                                <h3>\r\n                        " +
"                            <button");

WriteLiteral(" type=\"button\"");

WriteAttribute("aria-controls", Tuple.Create(" aria-controls=\"", 5130), Tuple.Create("\"", 5157)
, Tuple.Create(Tuple.Create("", 5146), Tuple.Create("item-", 5146), true)
              , Tuple.Create(Tuple.Create("", 5151), Tuple.Create<System.Object, System.Int32>(index
, 5151), false)
);

WriteLiteral(" aria-expanded=\"false\"");

WriteLiteral(" class=\"_jsAccordion\"");

WriteLiteral(">");

                                                                                                                                            Write(item.Title);

WriteLiteral(" - <i>");

                                                                                                                                                             Write(item.ShortTypeName);

WriteLiteral("</i></button>\r\n                                                </h3>\r\n           " +
"                                     <div");

WriteLiteral(" class=\"accordion-panel\"");

WriteLiteral(" style=\"display: none;\"");

WriteAttribute("id", Tuple.Create(" id=\"", 5407), Tuple.Create("\"", 5423)
, Tuple.Create(Tuple.Create("", 5412), Tuple.Create("item-", 5412), true)
                             , Tuple.Create(Tuple.Create("", 5417), Tuple.Create<System.Object, System.Int32>(index
, 5417), false)
);

WriteLiteral(">\r\n                                                    <pre><code>");

                                                          Write(item.Content);

WriteLiteral("</code></pre>\r\n                                                </div>\r\n          " +
"                                  </li>\r\n");

                                        }

WriteLiteral("                                    </ol>\r\n");

                                }

WriteLiteral("                            </div>\r\n                            <div");

WriteLiteral(" class=\"sidebar\"");

WriteLiteral(">\r\n                                <h2>");

                               Write(Html.TranslateWithPath("count", localizationPath));

WriteLiteral("</h2>\r\n                                <ul>\r\n");

                                    
                                     foreach (int numberOfItems in Model.NumberOfItems)
                                    {

WriteLiteral("                                        <li>\r\n                                   " +
"         <label>\r\n                                                <input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" data-dojo-type=\"dijit/form/RadioButton\"");

WriteAttribute("name", Tuple.Create(" name=\"", 6298), Tuple.Create("\"", 6348)
                                  , Tuple.Create(Tuple.Create("", 6305), Tuple.Create<System.Object, System.Int32>(Html.NameFor(m => m.SelectedNumberOfItems)
, 6305), false)
);

WriteAttribute("value", Tuple.Create(" value=\"", 6349), Tuple.Create("\"", 6371)
                                                                                      , Tuple.Create(Tuple.Create("", 6357), Tuple.Create<System.Object, System.Int32>(numberOfItems
, 6357), false)
);

WriteAttribute("checked", Tuple.Create(" checked=\"", 6372), Tuple.Create("\"", 6441)
                                                                                                                , Tuple.Create(Tuple.Create("", 6382), Tuple.Create<System.Object, System.Int32>(numberOfItems == Model.SelectedNumberOfItems ? "" : null
, 6382), false)
);

WriteLiteral(" /> ");

                                                                                                                                                                                                                                                          Write(numberOfItems);

WriteLiteral("\r\n                                            </label>\r\n                         " +
"               </li>\r\n");

                                    }

WriteLiteral("                                </ul>\r\n                                <p>\r\n     " +
"                               <button");

WriteLiteral(" data-dojo-type=\"dijit/form/Button\"");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" class=\"epi-primary _jsAccordion\"");

WriteLiteral(">");

                                                                                                                         Write(Html.TranslateWithPath("execute", localizationPath));

WriteLiteral("</button>\r\n                                </p>\r\n\r\n                              " +
"  <h2>");

                               Write(Html.TranslateWithPath("types", localizationPath));

WriteLiteral("</h2>\r\n\r\n");

                                
                                 foreach (var group in Model.TypeCounts)
                                {
                                    if (Model.TypeCounts.Count > 1)
                                    {

WriteLiteral("                                        <h3>");

                                       Write(group.Key);

WriteLiteral("</h3>\r\n");

                                    }

WriteLiteral("                                    <ul>\r\n");

                                        
                                         foreach (var type in group.Value.OrderBy(t => t.Name))
                                        {

WriteLiteral("                                            <li>\r\n                               " +
"                 <label>\r\n                                                    <i" +
"nput");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" data-dojo-type=\"dijit/form/RadioButton\"");

WriteAttribute("name", Tuple.Create(" name=\"", 7719), Tuple.Create("\"", 7760)
                                      , Tuple.Create(Tuple.Create("", 7726), Tuple.Create<System.Object, System.Int32>(Html.NameFor(m => m.SelectedType)
, 7726), false)
);

WriteAttribute("value", Tuple.Create(" value=\"", 7761), Tuple.Create("\"", 7779)
                                                                                 , Tuple.Create(Tuple.Create("", 7769), Tuple.Create<System.Object, System.Int32>(type.Type
, 7769), false)
);

WriteAttribute("checked", Tuple.Create(" checked=\"", 7780), Tuple.Create("\"", 7836)
                                                                                                       , Tuple.Create(Tuple.Create("", 7790), Tuple.Create<System.Object, System.Int32>(Model.SelectedType == type.Type ? "" : null
, 7790), false)
);

WriteLiteral(" /> ");

                                                                                                                                                                                                                                    Write(type.Name);

WriteLiteral(" (");

                                                                                                                                                                                                                                                Write(type.Count);

WriteLiteral(")\r\n                                                </label>\r\n                    " +
"                        </li>\r\n");

                                        }

WriteLiteral("                                    </ul>\r\n");

                                }

WriteLiteral("                                <p>\r\n                                    <button");

WriteLiteral(" data-dojo-type=\"dijit/form/Button\"");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" class=\"epi-primary _jsAccordion\"");

WriteLiteral(">");

                                                                                                                         Write(Html.TranslateWithPath("execute", localizationPath));

WriteLiteral("</button>\r\n                                </p>\r\n                            </di" +
"v>\r\n                        </div>\r\n");

                    }

WriteLiteral("                </div>\r\n            </div>\r\n");

        }

WriteLiteral("    </div>\r\n</div>");

        }
    }
}
#pragma warning restore 1591
