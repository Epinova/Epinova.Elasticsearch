#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using Epinova.ElasticSearch.Core.EPiServer.Extensions;
    using Epinova.ElasticSearch.Core.Models;
    using EPiServer;
    using EPiServer.Core;
    using EPiServer.Editor;
    using EPiServer.Security;
    using EPiServer.SpecializedProperties;
    using EPiServer.Web;
    using EPiServer.Web.Mvc.Html;
    using EPiServer.Web.Routing;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/ElasticSearchAdmin/IndexInspector/Index.cshtml")]
    public partial class _Views_ElasticSearchAdmin_IndexInspector_Index_cshtml : System.Web.Mvc.WebViewPage<Epinova.ElasticSearch.Core.EPiServer.Models.ViewModels.InspectViewModel>
    {
        public _Views_ElasticSearchAdmin_IndexInspector_Index_cshtml()
        {
        }
        public override void Execute()
        {
WriteLiteral("\r\n");

  
    Layout = "~/Views/ElasticSearchAdmin/_ElasticSearch.cshtml";

WriteLiteral("\r\n\r\n");

 if (Model == null)
{
    return;
}

WriteLiteral("\r\n");

  
    string localizationPath = "/epinovaelasticsearch/indexinspector/";

WriteLiteral("\r\n\r\n");

DefineSection("Scripts", () => {

WriteLiteral(@"
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var accordions = document.getElementsByClassName(""_jsAccordion"");

            for (var i = 0; i < accordions.length; i++) {
                accordions[i].onclick = function (e) {
                    e.preventDefault();

                    if (this.getAttribute('aria-expanded') === 'false') {
                        this.setAttribute(""aria-expanded"", ""true"");
                    } else {
                        this.setAttribute(""aria-expanded"", ""false"");
                    }

                    var controls = this.getAttribute('aria-controls'),
                        content = document.getElementById(controls);

                    if (content.style.display === ""block"") {
                        content.style.display = ""none"";
                    } else {
                        content.style.display = ""block"";
                    }
                }
            }
        }, false);
    </script>
");

});

WriteLiteral("\r\n<div");

WriteLiteral(" class=\"epi-formArea epi-padding-small\"");

WriteLiteral(">\r\n    <h1");

WriteLiteral(" class=\"EP-prefix\"");

WriteLiteral(">");

                     Write(Html.TranslateWithPath("heading", localizationPath));

WriteLiteral("</h1>\r\n\r\n");

    
     using (Html.BeginForm("Index", "ElasticIndexInspector"))
    {

WriteLiteral("        <div");

WriteLiteral(" class=\"indexInspector\"");

WriteLiteral(">\r\n            <div");

WriteLiteral(" class=\"mainContent\"");

WriteLiteral(">\r\n                <p>\r\n                    <input");

WriteLiteral(" data-dojo-type=\"dijit/form/ValidationTextBox\"");

WriteLiteral(" data-dojo-props=\"placeholder:\'");

                                                                                                  Write(Html.TranslateWithPathRaw("placeholder", localizationPath));

WriteLiteral("\'\"");

WriteLiteral(" name=\"searchText\"");

WriteAttribute("value", Tuple.Create(" value=\"", 1953), Tuple.Create("\"", 1978)
                                                                                                              , Tuple.Create(Tuple.Create("", 1961), Tuple.Create<System.Object, System.Int32>(Model.SearchText
, 1961), false)
);

WriteLiteral(" />\r\n                    <button");

WriteLiteral(" data-dojo-type=\"dijit/form/Button\"");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" class=\"epi-primary\"");

WriteLiteral(">");

                                                                                            Write(Html.TranslateWithPath("execute", localizationPath));

WriteLiteral("</button>\r\n                </p>\r\n\r\n");

                
                 if (String.IsNullOrWhiteSpace(Model.SearchText) && String.IsNullOrWhiteSpace(Model.SelectedType))
                {

WriteLiteral("                    <h2>");

                   Write(Html.TranslateWithPath("unfiltered", localizationPath));

WriteLiteral("</h2>\r\n");

                }
                else if (Model.SearchHits == null || !Model.SearchHits.Any())
                {

WriteLiteral("                    <h2>");

                   Write(Html.TranslateWithPath("nohits", localizationPath));

WriteLiteral("</h2>\r\n");

                }
                else
                {

WriteLiteral("                    <ol");

WriteLiteral(" class=\"indexes\"");

WriteLiteral(">\r\n");

                        
                         for (var index = 0; index < Model.SearchHits.Count; index++)
                        {
                            InspectItem item = Model.SearchHits[index];

WriteLiteral("                            <li");

WriteLiteral(" class=\"accordion\"");

WriteLiteral(">\r\n                                <h3>\r\n                                    <but" +
"ton");

WriteLiteral(" type=\"button\"");

WriteAttribute("aria-controls", Tuple.Create(" aria-controls=\"", 3024), Tuple.Create("\"", 3051)
, Tuple.Create(Tuple.Create("", 3040), Tuple.Create("item-", 3040), true)
, Tuple.Create(Tuple.Create("", 3045), Tuple.Create<System.Object, System.Int32>(index
, 3045), false)
);

WriteLiteral(" aria-expanded=\"false\"");

WriteLiteral(" class=\"_jsAccordion\"");

WriteLiteral(">");

                                                                                                                            Write(item.Title);

WriteLiteral(" - <i>");

                                                                                                                                             Write(item.ShortTypeName);

WriteLiteral("</i></button>\r\n                                </h3>\r\n                           " +
"     <div");

WriteLiteral(" class=\"accordion-panel\"");

WriteLiteral(" style=\"display: none;\"");

WriteAttribute("id", Tuple.Create(" id=\"", 3269), Tuple.Create("\"", 3285)
, Tuple.Create(Tuple.Create("", 3274), Tuple.Create("item-", 3274), true)
             , Tuple.Create(Tuple.Create("", 3279), Tuple.Create<System.Object, System.Int32>(index
, 3279), false)
);

WriteLiteral(">\r\n                                    <pre><code>");

                                          Write(item.Content);

WriteLiteral("</code></pre>\r\n                                </div>\r\n                          " +
"  </li>\r\n");

                        }

WriteLiteral("                    </ol>\r\n");

                }

WriteLiteral("            </div>\r\n            <div");

WriteLiteral(" class=\"sidebar\"");

WriteLiteral(">\r\n");

                
                 if (Model.Indices != null && Model.Indices.Count > 1)
                {

WriteLiteral("                    <h2>");

                   Write(Html.TranslateWithPath("indexes", localizationPath));

WriteLiteral("</h2>\r\n");

WriteLiteral("                    <ul>\r\n");

                        
                         foreach (string index in Model.Indices)
                        {

WriteLiteral("                            <li>\r\n                                <label>\r\n      " +
"                              <input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" data-dojo-type=\"dijit/form/RadioButton\"");

WriteAttribute("name", Tuple.Create(" name=\"", 4030), Tuple.Create("\"", 4072)
                      , Tuple.Create(Tuple.Create("", 4037), Tuple.Create<System.Object, System.Int32>(Html.NameFor(m => m.SelectedIndex)
, 4037), false)
);

WriteAttribute("value", Tuple.Create(" value=\"", 4073), Tuple.Create("\"", 4087)
                                                                  , Tuple.Create(Tuple.Create("", 4081), Tuple.Create<System.Object, System.Int32>(index
, 4081), false)
);

WriteAttribute("checked", Tuple.Create(" checked=\"", 4088), Tuple.Create("\"", 4141)
                                                                                    , Tuple.Create(Tuple.Create("", 4098), Tuple.Create<System.Object, System.Int32>(Model.SelectedIndex == index ? "" : null
, 4098), false)
);

WriteLiteral(" /> ");

                                                                                                                                                                                                              Write(index);

WriteLiteral("\r\n                                </label>\r\n                            </li>\r\n");

                        }

WriteLiteral("                    </ul>\r\n");

WriteLiteral("                    <p>\r\n                        <button");

WriteLiteral(" data-dojo-type=\"dijit/form/Button\"");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" class=\"epi-primary _jsAccordion\"");

WriteLiteral(">");

                                                                                                             Write(Html.TranslateWithPath("execute", localizationPath));

WriteLiteral("</button>\r\n                    </p>\r\n");

                }

WriteLiteral("\r\n                <h2>");

               Write(Html.TranslateWithPath("count", localizationPath));

WriteLiteral("</h2>\r\n                <ul>\r\n");

                    
                     foreach (int numberOfItems in Model.NumberOfItems)
                    {

WriteLiteral("                        <li>\r\n                            <label>\r\n              " +
"                  <input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" data-dojo-type=\"dijit/form/RadioButton\"");

WriteAttribute("name", Tuple.Create(" name=\"", 4887), Tuple.Create("\"", 4937)
                  , Tuple.Create(Tuple.Create("", 4894), Tuple.Create<System.Object, System.Int32>(Html.NameFor(m => m.SelectedNumberOfItems)
, 4894), false)
);

WriteAttribute("value", Tuple.Create(" value=\"", 4938), Tuple.Create("\"", 4960)
                                                                      , Tuple.Create(Tuple.Create("", 4946), Tuple.Create<System.Object, System.Int32>(numberOfItems
, 4946), false)
);

WriteAttribute("checked", Tuple.Create(" checked=\"", 4961), Tuple.Create("\"", 5030)
                                                                                                , Tuple.Create(Tuple.Create("", 4971), Tuple.Create<System.Object, System.Int32>(numberOfItems == Model.SelectedNumberOfItems ? "" : null
, 4971), false)
);

WriteLiteral(" /> ");

                                                                                                                                                                                                                                          Write(numberOfItems);

WriteLiteral("\r\n                            </label>\r\n                        </li>\r\n");

                    }

WriteLiteral("                </ul>\r\n                <p>\r\n                    <button");

WriteLiteral(" data-dojo-type=\"dijit/form/Button\"");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" class=\"epi-primary _jsAccordion\"");

WriteLiteral(">");

                                                                                                         Write(Html.TranslateWithPath("execute", localizationPath));

WriteLiteral("</button>\r\n                </p>\r\n\r\n");

                
                 if (Model.Languages != null && Model.Languages.Count > 1)
                {

WriteLiteral("                    <h2>");

                   Write(Html.TranslateWithPath("languages", localizationPath));

WriteLiteral("</h2>\r\n");

WriteLiteral("                    <ul>\r\n");

                        
                         foreach (var language in Model.Languages)
                        {

WriteLiteral("                            <li>\r\n                                <label>\r\n      " +
"                              <input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" data-dojo-type=\"dijit/form/RadioButton\"");

WriteAttribute("name", Tuple.Create(" name=\"", 5855), Tuple.Create("\"", 5900)
                      , Tuple.Create(Tuple.Create("", 5862), Tuple.Create<System.Object, System.Int32>(Html.NameFor(m => m.SelectedLanguage)
, 5862), false)
);

WriteAttribute("value", Tuple.Create(" value=\"", 5901), Tuple.Create("\"", 5929)
                                                                     , Tuple.Create(Tuple.Create("", 5909), Tuple.Create<System.Object, System.Int32>(language.LanguageID
, 5909), false)
);

WriteAttribute("checked", Tuple.Create(" checked=\"", 5930), Tuple.Create("\"", 6000)
                                                                                                     , Tuple.Create(Tuple.Create("", 5940), Tuple.Create<System.Object, System.Int32>(Model.SelectedLanguage == language.LanguageID ? "" : null
, 5940), false)
);

WriteLiteral(" /> ");

                                                                                                                                                                                                                                                Write(language.Name);

WriteLiteral("\r\n                                </label>\r\n                            </li>\r\n");

                        }

WriteLiteral("                    </ul>\r\n");

WriteLiteral("                    <p>\r\n                        <button");

WriteLiteral(" data-dojo-type=\"dijit/form/Button\"");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" class=\"epi-primary _jsAccordion\"");

WriteLiteral(">");

                                                                                                             Write(Html.TranslateWithPath("execute", localizationPath));

WriteLiteral("</button>\r\n                    </p>\r\n");

                }

WriteLiteral("\r\n                <h2>");

               Write(Html.TranslateWithPath("types", localizationPath));

WriteLiteral("</h2>\r\n\r\n");

                
                 foreach (var group in Model.TypeCounts)
                {

WriteLiteral("                    <h3>");

                   Write(group.Key);

WriteLiteral("</h3>\r\n");

WriteLiteral("                    <ul>\r\n");

                        
                         foreach (var type in group.Value)
                        {

WriteLiteral("                            <li>\r\n                                <label>\r\n      " +
"                              <input");

WriteLiteral(" type=\"radio\"");

WriteLiteral(" data-dojo-type=\"dijit/form/RadioButton\"");

WriteAttribute("name", Tuple.Create(" name=\"", 6881), Tuple.Create("\"", 6922)
                      , Tuple.Create(Tuple.Create("", 6888), Tuple.Create<System.Object, System.Int32>(Html.NameFor(m => m.SelectedType)
, 6888), false)
);

WriteAttribute("value", Tuple.Create(" value=\"", 6923), Tuple.Create("\"", 6941)
                                                                 , Tuple.Create(Tuple.Create("", 6931), Tuple.Create<System.Object, System.Int32>(type.Type
, 6931), false)
);

WriteAttribute("checked", Tuple.Create(" checked=\"", 6942), Tuple.Create("\"", 6998)
                                                                                       , Tuple.Create(Tuple.Create("", 6952), Tuple.Create<System.Object, System.Int32>(Model.SelectedType == type.Type ? "" : null
, 6952), false)
);

WriteLiteral(" /> ");

                                                                                                                                                                                                                    Write(type.Name);

WriteLiteral(" (");

                                                                                                                                                                                                                                Write(type.Count);

WriteLiteral(")\r\n                                </label>\r\n                            </li>\r\n");

                        }

WriteLiteral("                    </ul>\r\n");

                }

WriteLiteral("                <p>\r\n                    <button");

WriteLiteral(" data-dojo-type=\"dijit/form/Button\"");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" class=\"epi-primary _jsAccordion\"");

WriteLiteral(">");

                                                                                                         Write(Html.TranslateWithPath("execute", localizationPath));

WriteLiteral("</button>\r\n                </p>\r\n            </div>\r\n        </div>\r\n");

    }

WriteLiteral("</div>  ");

        }
    }
}
#pragma warning restore 1591
